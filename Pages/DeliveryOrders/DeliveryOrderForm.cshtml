@page "{rowGuid?}"
@using Indotalent.Models.Enums
@using System.Text.Json
@using System.Text.Json.Serialization
@model Indotalent.Pages.DeliveryOrders.DeliveryOrderFormModel
@{
    Layout = "~/Pages/Shared/Dashmin/_Admin.cshtml";
    var statusMessage = Model.StatusMessage;
    Model.StatusMessage = string.Empty;

    var productLookupJson = JsonSerializer.Serialize(Model.ProductLookup);
    var warehouseLookupJson = JsonSerializer.Serialize(Model.WarehouseLookup);
}

<div class="form-card" id="formcard">

    <div class="m-2">


        <form id="formMain" method="post" novalidate="">
            <input type="hidden" asp-for="@Model.DeliveryOrderForm.RowGuid" />
            <input type="hidden" asp-for="@Model.DeliveryOrderForm.Id" />
            <div class="form-card-body">
                <div>
                    <ul class="nav nav-tabs" id="myTab" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link rounded-0  text-body active" id="general-tab" data-bs-toggle="tab" data-bs-target="#general" type="button" role="tab" aria-controls="general" aria-selected="true">General</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link rounded-0  text-body" id="audit-tab" data-bs-toggle="tab" data-bs-target="#audit" type="button" role="tab" aria-controls="audit" aria-selected="false">Audit</button>
                        </li>
                    </ul>
                    <div class="tab-content" id="myTabContent">
                        <div class="tab-pane fade show active" id="general" role="tabpanel" aria-labelledby="general-tab">
                            <p class="small-italic-left">General</p>
                            <fieldset>
                                <div class="row">
                                    <div class="col-md-12">
                                        @if (!string.IsNullOrEmpty(Model.Number))
                                        {
                                            <h4>@Model.Number</h4>
                                        }
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label asp-for="@Model.DeliveryOrderForm.SalesOrderId" class="form-label"></label>
                                            <select asp-for="@Model.DeliveryOrderForm.SalesOrderId" asp-items="@Model.SalesOrderLookup" class="form-control">
                                                <option value="">-- Select Order --</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label asp-for="@Model.DeliveryOrderForm.DeliveryDate" class="form-label"></label>
                                            <input asp-for="@Model.DeliveryOrderForm.DeliveryDate" class="form-control" />
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label asp-for="@Model.DeliveryOrderForm.Status" class="form-label"></label>
                                            <select asp-for="@Model.DeliveryOrderForm.Status" asp-items="Html.GetEnumSelectList<DeliveryOrderStatus>()" class="form-control">
                                                <option value="">-- Select Status --</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label asp-for="@Model.DeliveryOrderForm.Description" class="form-label"></label>
                                            <textarea asp-for="@Model.DeliveryOrderForm.Description" class="form-control" rows="4"></textarea>
                                        </div>
                                    </div>
                                </div>
                            </fieldset>
                        </div>
                        <div class="tab-pane fade" id="audit" role="tabpanel" aria-labelledby="audit-tab">
                            <p class="small-italic-left">Audit</p>
                            <fieldset>
                                <div class="row">
                                    <div class="col-md-6">
                                        <label class="form-label" asp-for="@Model.DeliveryOrderForm.CreatedAtString"></label>
                                        <input class="form-control" asp-for="@Model.DeliveryOrderForm.CreatedAtString" type="text" placeholder="CreatedAt" disabled />
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label" asp-for="@Model.DeliveryOrderForm.CreatedByUserName"></label>
                                        <input class="form-control" asp-for="@Model.DeliveryOrderForm.CreatedByUserName" type="text" placeholder="CreatedBy" disabled />
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label" asp-for="@Model.DeliveryOrderForm.UpdatedAtString"></label>
                                        <input class="form-control" asp-for="@Model.DeliveryOrderForm.UpdatedAtString" type="text" placeholder="UpdatedAt" disabled />
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label" asp-for="@Model.DeliveryOrderForm.UpdatedByUserName"></label>
                                        <input class="form-control" asp-for="@Model.DeliveryOrderForm.UpdatedByUserName" type="text" placeholder="UpdatedBy" disabled />
                                    </div>
                                </div>
                            </fieldset>
                        </div>
                    </div>
                </div>




            </div>
            <div class="form-card-footer">
                <button type="submit" id="btnSubmit" class="e-btn e-control @(Model.Action == "delete" ? "e-danger" : "")">@(Model.Action == "delete" ? "Delete" : "Submit")</button>
            </div>

        </form>


        @if (!string.IsNullOrEmpty(Model.Number))
        {
            <p class="small-italic-left">Delivery Items</p>
            <fieldset class="mb-5">
                <div class="row">
                    <div class="col-md-12">
                        <div id="Grid"></div>
                    </div>
                </div>
            </fieldset>
        }
    </div>

</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {

            setFormCardHeight();

            showStatusMessage('@statusMessage');

            new ej.inputs.TextBox({}, '#DeliveryOrderForm_Description');
            new ej.dropdowns.DropDownList({ allowFiltering: true }, '#DeliveryOrderForm_SalesOrderId');
            new ej.dropdowns.DropDownList({}, '#DeliveryOrderForm_Status');
            new ej.calendars.DateTimePicker({}, '#DeliveryOrderForm_DeliveryDate');
            new ej.inputs.TextBox({}, '#DeliveryOrderForm_CreatedAtString');
            new ej.inputs.TextBox({}, '#DeliveryOrderForm_CreatedByUserName');
            new ej.inputs.TextBox({}, '#DeliveryOrderForm_UpdatedAtString');
            new ej.inputs.TextBox({}, '#DeliveryOrderForm_UpdatedByUserName');
            new ej.buttons.Button({ isPrimary: true }, '#btnSubmit');

            var validationOptions = {
                rules: {
                    'DeliveryOrderForm.SalesOrderId': { required: true },
                    'DeliveryOrderForm.DeliveryDate': { required: true },
                    'DeliveryOrderForm.Status': { required: true },
                }
            }

            var formValidator = new ej.inputs.FormValidator('#formMain', validationOptions);
            var formElement = document.getElementById('formMain');
            formElement.addEventListener('submit', function (e) {
                e.preventDefault();
                if (formValidator.validate()) {
                    formElement.submit();
                }
            })

        });
    </script>

    <script>

        var products = @Html.Raw(productLookupJson);
        var productLookup = {};
        products.forEach(function (product) {
            productLookup[product.ProductId] = product.ProductName;
        });


        var warehouses = @Html.Raw(warehouseLookupJson);
        var warehouseLookup = {};
        warehouses.forEach(function (warehouse) {
            warehouseLookup[warehouse.WarehouseId] = warehouse.WarehouseName;
        });


        var gridContainer = document.getElementById('Grid');
        if (gridContainer) {
            var grid = new ej.grids.Grid({
                dataSource: new ej.data.DataManager({
                    url: '/odata/DeliveryOrderItemChild',
                    adaptor: new ej.data.ODataV4Adaptor(),
                    headers: [
                        { ParentId: "@Model.DeliveryOrderForm.Id" }
                    ]
                }),
                editSettings: { allowEditing: true, allowAdding: true, allowDeleting: true, showDeleteConfirmDialog: true, mode: 'Normal' },
                allowFiltering: false,
                allowSorting: false,
                allowSelection: true,
                allowGrouping: false,
                allowTextWrap: true,
                allowResizing: false,
                allowPaging: false,
                allowExcelExport: true,
                filterSettings: { type: 'CheckBox' },
                selectionSettings: { persistSelection: true, type: 'Single' },
                autoFit: false,
                showColumnMenu: false,
                gridLines: 'Horizontal',
                columns: [
                    { type: 'checkbox', width: 30 },
                    { field: 'Id', isPrimaryKey: true, headerText: 'Id', visible: false },
                    {
                        field: 'WarehouseId',
                        headerText: 'Warehouse',
                        width: 200,
                        validationRules: { required: true },
                        disableHtmlEncode: false,
                        valueAccessor: (field, data, column) => {
                            return warehouseLookup[data[field]];
                        },
                        editType: 'dropdownedit',
                        edit: {
                            create: () => {
                                warehouseElem = document.createElement('input');
                                return warehouseElem;
                            },
                            read: () => {
                                return warehouseObj.value;
                            },
                            destroy: function () {
                                warehouseObj.destroy();
                            },
                            write: function (args) {
                                warehouseObj = new ej.dropdowns.DropDownList({
                                    dataSource: @Html.Raw(warehouseLookupJson),
                                    fields: { value: 'WarehouseId', text: 'WarehouseName' },
                                    placeholder: 'Select a Warehouse',
                                    floatLabelType: 'Never'
                                });
                                warehouseObj.value = args.rowData.WarehouseId;
                                warehouseObj.appendTo(warehouseElem);
                            }
                        },
                    },
                    {
                        field: 'ProductId',
                        headerText: 'Product',
                        width: 200,
                        validationRules: { required: true },
                        disableHtmlEncode: false,
                        valueAccessor: (field, data, column) => {
                            return productLookup[data[field]];
                        },
                        editType: 'dropdownedit',
                        edit: {
                            create: () => {
                                productElem = document.createElement('input');
                                return productElem;
                            },
                            read: () => {
                                return productObj.value;
                            },
                            destroy: function () {
                                productObj.destroy();
                            },
                            write: function (args) {
                                productObj = new ej.dropdowns.DropDownList({
                                    dataSource: @Html.Raw(productLookupJson),
                                    fields: { value: 'ProductId', text: 'ProductName' },
                                    placeholder: 'Select a Product',
                                    floatLabelType: 'Never'
                                });
                                productObj.value = args.rowData.ProductId;
                                productObj.appendTo(productElem);
                            }
                        },
                    },
                    {
                        field: 'Movement', width: 100,
                        validationRules: {
                            required: true,
                            custom: [(args) => {
                                return args['value'] > 0;
                            }, 'Must be a positive number and not zero']
                        },
                        type: 'number', format: 'N2', textAlign: 'Right', defaultValue: '1'
                    },
                ],
                toolbar: [
                    'ExcelExport',
                    { type: 'Separator' },
                    'Add', 'Edit', 'Delete', 'Update', 'Cancel',
                    { type: 'Separator' },
                    { text: 'Download Pdf', tooltipText: 'Download Pdf', prefixIcon: 'e-export-pdf', id: 'PdfCustom' },
                ],
                beforeDataBound: () => {
                },
                dataBound: function () {
                },
                excelExportComplete: () => {
                },
                rowSelected: () => {
                },
                rowDeselected: () => {
                },
                rowSelecting: () => {
                    if (grid.getSelectedRecords().length) {
                        grid.clearSelection();
                    }
                },
                toolbarClick: (args) => {
                    if (args.item.id === 'Grid_excelexport') {
                        grid.excelExport();
                    }

                    if (args.item.id === 'PdfCustom') {
                        var formUrl = '/DeliveryOrders/DeliveryOrderDownload?id=' + '@Model.DeliveryOrderForm.Id';
                        window.location.href = formUrl;
                    }
                },
                actionComplete: (args) => {

                    if (args.requestType === 'save' || args.requestType === 'delete') {

                        let message = 'Delete Process Success';
                        switch (args.action) {
                            case 'add':
                                message = 'Add Process Success';
                                break;
                            case 'edit':
                                message = 'Edit Process Success';
                                break;
                            default:
                                break;
                        }

                        new ej.notifications.Toast({
                            content: message,
                            cssClass: "e-toast-success",
                            icon: 'e-success toast-icons',
                            position: { X: "Left", Y: "Top" }
                        }, '#Toast').show();


                    }
                }
            });


            grid.appendTo('#Grid');
        }

    </script>

}
